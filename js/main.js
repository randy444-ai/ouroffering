// main.js
// This file holds all site-wide JavaScript

document.addEventListener("DOMContentLoaded", () => {

  // =====================================
  // Auto-highlight glossary terms (same page + cross-page)
  // =====================================
  document.querySelectorAll('a').forEach(link => {
    const href = link.getAttribute('href');

    // Match both same-page (#term) and cross-page (something.html#term) glossary links
    if (href && href.includes('#')) {
      const hash = href.split('#')[1]; // term ID after the #
      if (hash) {
        // Check if target exists on current page
        const targetElement = document.getElementById(hash);
        // Apply style regardless of whether it exists here (so cross-page links still style)
        if (targetElement || href.includes('glossary.html')) {
          link.classList.add('glossary-term');
        }
      }
    }
  });

  // =====================================
  // Rotating "Do This Now" prompts
  // =====================================
  const prompts = [
    "Pause for a moment and feel the presence of your breath.",
    "Look away from the screen and notice something beautiful in your space.",
    "Recall a time you felt completely at peace — rest in that feeling.",
    "Read one glossary entry slowly — as if it’s speaking directly to you.",
    "Step outside for 60 seconds and notice the smallest details around you.",
    "Ask yourself, quietly: 'Am I aware?' — notice the stillness that follows."
  ];

  let currentIndex = 0;
  const textElement = document.getElementById("do-this-text");

  if (textElement) {
    setInterval(() => {
      currentIndex = (currentIndex + 1) % prompts.length;
      textElement.style.opacity = 0;
      setTimeout(() => {
        textElement.textContent = prompts[currentIndex];
        textElement.style.opacity = 1;
      }, 500);
    }, 7000);
  }

});
// Show floating Back to Index button when scrolling glossary page
document.addEventListener("DOMContentLoaded", () => {
  const backButton = document.querySelector(".back-to-index");

  if (backButton) {
    window.addEventListener("scroll", () => {
      if (window.scrollY > 300) {
        backButton.classList.add("visible");
      } else {
        backButton.classList.remove("visible");
      }
    });
  }
});
// Dialogue response system for dialogue.html
document.addEventListener("DOMContentLoaded", () => {
  const form = document.getElementById("dialogue-form");
  const input = document.getElementById("dialogue-input");
  const output = document.getElementById("dialogue-output");

  if (form) {
    form.addEventListener("submit", (e) => {
      e.preventDefault();
      const question = input.value.trim();
      if (question === "") return;

      // Clear input
      input.value = "";

      // Create user question element
      const userMessage = document.createElement("p");
      userMessage.className = "user-message";
      userMessage.textContent = "You: " + question;
      output.appendChild(userMessage);

      // Generate a placeholder AI-style response
      const response = document.createElement("p");
      response.className = "ai-message";
      response.textContent = "I've heard it said that true freedom is found not in seeking, but in recognizing what you already are.";
      output.appendChild(response);

      // Scroll to bottom
      output.scrollTop = output.scrollHeight;
    });
  }
});
/* =========================
   EXISTING CODE ABOVE HERE
   ========================= */

// ==========================
// Dialogue Page Logic
// ==========================
const responses = {
  "why is there so much suffering in the world?": 
    "Spira often reminds us that suffering is generated by the seeking and resisting ego. When we believe ourselves to be separate, we live in conflict with what is. By recognizing that our true nature is already whole, the struggle begins to dissolve.",

  "what is non-duality?": 
    "Non-duality points to the truth that reality is not divided into separate parts. I've heard it said: we are like waves, appearing distinct, but never separate from the ocean.",

  "who am i?": 
    "Ramana Maharshi encouraged seekers to ask this very question. The deeper you look, the more the personal self fades, leaving only Conscious Awareness — your true Self."
};

// Attach handler only if dialogue form exists
const dialogueForm = document.getElementById("dialogue-form");
if (dialogueForm) {
  dialogueForm.addEventListener("submit", function (e) {
    e.preventDefault();

    const input = document.getElementById("dialogue-input");
    const question = input.value.trim().toLowerCase();
    const output = document.getElementById("dialogue-output");

    if (responses[question]) {
      output.innerText = responses[question];
    } else {
      output.innerText = 
        "This is a deep question. The answer may not be immediate. Let's stay with it gently, as truth reveals itself in stillness.";
    }

    input.value = "";
  });
}
// ==========================
// End Dialogue Page Logic
// ==========================
// === Dialogue Page Script ===
document.addEventListener("DOMContentLoaded", () => {
  const form = document.getElementById("dialogue-form");
  const input = document.getElementById("dialogue-input");
  const output = document.getElementById("dialogue-output");

  if (form && input && output) {
    form.addEventListener("submit", (e) => {
      e.preventDefault();

      const userText = input.value.trim();
      if (!userText) return;

      // Display user message
      const userDiv = document.createElement("div");
      userDiv.classList.add("user-message");
      userDiv.textContent = "You: " + userText;
      output.appendChild(userDiv);

      // Placeholder AI reply
      const aiDiv = document.createElement("div");
      aiDiv.classList.add("ai-message");
      aiDiv.textContent = "AI: That is a deep inquiry. Together, we can explore it.";
      output.appendChild(aiDiv);

      // Clear input and scroll
      input.value = "";
      output.scrollTop = output.scrollHeight;
    });
  }
});
// --- Glossary Return System: stable IDs + robust navigation (vA) ---
(function () {
  // Make a stable slug from the glossary href fragment (e.g. #non-dual -> "non-dual")
  function slugFromGlossaryHref(a) {
    const href = a.getAttribute('href') || '';
    const frag = href.split('#')[1] || 'term';
    return (frag.toLowerCase().replace(/[^a-z0-9\-]/g, '') || 'term');
  }

  // Assign deterministic IDs to ALL glossary links on the page (so they exist after reload)
  function assignStableIdsToGlossaryLinks() {
    const counts = {};
    document.querySelectorAll('a.glossary-link').forEach((a) => {
      if (a.id) return; // keep any hand-written ids like "illusion-anchor"
      const slug = slugFromGlossaryHref(a);
      counts[slug] = (counts[slug] || 0) + 1;
      a.id = `glsrc-${slug}-${counts[slug]}`; // e.g. glsrc-non-dual-1
    });
  }

  // After load, if there's a #hash, scroll to it (covers first paint before IDs existed)
  function scrollToHashTarget() {
    if (!location.hash) return;
    const id = decodeURIComponent(location.hash.slice(1));
    const el = document.getElementById(id);
    if (el) {
      el.scrollIntoView({ behavior: 'smooth', block: 'center' });
      try { el.focus({ preventScroll: true }); } catch (_) {}
    }
  }

  // Ensure IDs exist on every page with glossary links
  document.addEventListener('DOMContentLoaded', function () {
    assignStableIdsToGlossaryLinks();
    scrollToHashTarget();
  });

  // Robust click handler: ensure stable id, add ?from=, and navigate explicitly
  document.addEventListener('click', function (e) {
    const a = e.target && e.target.closest && e.target.closest('a.glossary-link');
    if (!a) return;

    // Ensure a stable id now (and for the return visit)
    assignStableIdsToGlossaryLinks();
    const id = a.id; // now guaranteed to exist
    const returnTo = location.pathname.replace(/^\//, '') + '#' + encodeURIComponent(id);

    // Backup for same-tab
    try { sessionStorage.setItem('glossary:returnTo', returnTo); } catch (_) {}

    // Build glossary URL with ?from=
    let href = a.getAttribute('href') || 'glossary.html';
    try {
      const u = new URL(href, location.href);
      u.searchParams.set('from', returnTo);
      href = u.toString();
    } catch (_) {}

    // Respect new-tab / modifiers, but take control so updated URL is used
    const newTab = e.ctrlKey || e.metaKey || e.shiftKey || e.button === 1 || a.target === '_blank';
    e.preventDefault();
    if (newTab) window.open(href, '_blank'); else window.location.assign(href);
  }, { capture: true }); // capture prevents other handlers from swallowing it
})();
// --- Return Scroll Memory (safe-net) ---
(function () {
  // 1) Before leaving for the glossary, remember where we were on the page
  document.addEventListener('click', function (e) {
    const a = e.target && e.target.closest && e.target.closest('a.glossary-link');
    if (!a) return;
    try {
      sessionStorage.setItem('return:scrollY', String(window.scrollY));
      sessionStorage.setItem('return:path', location.pathname.replace(/^\//, ''));
    } catch (_) {}
    // We don't preventDefault here, so your existing helpers still run.
  }, { capture: true });

  // 2) On load, if we have a saved position for THIS page, restore it
  document.addEventListener('DOMContentLoaded', function () {
    try {
      const path = sessionStorage.getItem('return:path');
      const y = sessionStorage.getItem('return:scrollY');
      const here = location.pathname.replace(/^\//, '');
      if (path && y && path === here) {
        // Defer to let layout settle, then restore scroll
        setTimeout(function () {
          window.scrollTo(0, parseFloat(y));
        }, 0);
        // Clear so it doesn't re-trigger later
        sessionStorage.removeItem('return:path');
        sessionStorage.removeItem('return:scrollY');
      }
    } catch (_) {}
  });
})();

// Auto-mark the current page link in BOTH header and footer navs
document.addEventListener('DOMContentLoaded', () => {
  const path = (location.pathname.split('/').pop() || 'index.html').split('?')[0];

  const links = document.querySelectorAll(
    'header nav a[href], footer nav a[href], .nav a[href]'
  );

  links.forEach(a => {
    const href = (a.getAttribute('href') || '').split('?')[0];
    if (!href) return;

    if (href === path || (path === '' && href === 'index.html')) {
      a.setAttribute('aria-current', 'page');
    } else if (a.getAttribute('aria-current') === 'page') {
      a.removeAttribute('aria-current');
    }
  });
});



